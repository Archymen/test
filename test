{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "0b411800",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33mWARNING: Ignoring invalid distribution -umpy (/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -umpy (/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0mRequirement already satisfied: sqlalchemy==1.4.46 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (1.4.46)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages (from sqlalchemy==1.4.46) (0.4.16)\n",
      "\u001b[33mWARNING: Ignoring invalid distribution -umpy (/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -umpy (/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -umpy (/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -umpy (/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pandasql import sqldf\n",
    "!pip3 install sqlalchemy==1.4.46"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "f74bcc4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_orders_ids = np.arange(1, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "3aec039b",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_client_ids = np.arange(1, 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "03109351",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "ed540457",
   "metadata": {},
   "outputs": [],
   "source": [
    "start_date = pd.to_datetime('2018-01-01')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "e6ddd9f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "times = pd.date_range(start_date, periods=n, freq='1h')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "29963ce7",
   "metadata": {},
   "outputs": [],
   "source": [
    "first_names = ['Иван', 'Андрей', 'Анатолий', 'Игорь']\n",
    "last_names = ['Иванов', 'Алексеев', 'Тимофеев', 'Соколов']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "bad98fb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clients = pd.DataFrame({\n",
    "    'order_id' : all_client_ids})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "db34ae6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "products = ['X', 'Y']\n",
    "company = ['X', 'Y']\n",
    "region = ['Moscow', 'Saransk', 'Stavrapol', 'Ufa']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "e8876da3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/nb/lg50jgzs4_dc7mxlgvrrj9300000gn/T/ipykernel_14898/1123511354.py:1: DeprecationWarning: This function is deprecated. Please call randint(500, 5000 + 1) instead\n",
      "  order_amount = np.random.random_integers(500, 5000, 10000)\n"
     ]
    }
   ],
   "source": [
    "order_amount = np.random.random_integers(500, 5000, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "b39805fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clients = pd.DataFrame({\n",
    "    'client_id' : all_client_ids,\n",
    "    'first_name' : np.random.choice(first_names, size=len(df_clients)),\n",
    "    'last_name' : np.random.choice(last_names, size=len(df_clients)),\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "884c8f64",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_orders = pd.DataFrame({\n",
    "    'order_id' : all_orders_ids,})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "cc8449ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_orders = pd.DataFrame({\n",
    "    'order_id' : all_orders_ids,\n",
    "    'client_id' : np.random.choice(all_client_ids, size=len(df_orders)),\n",
    "    'products' : np.random.choice(products, size=len(df_orders)),\n",
    "    'order_time' : np.random.choice(times,size=len(df_orders)),\n",
    "    'company' : np.random.choice(company, size=len(df_orders)),\n",
    "    'order_amount' : np.random.choice(order_amount, size=len(df_orders)),\n",
    "    'region' : np.random.choice(region, size=len(df_orders))\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "f90cb5b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>client_id</th>\n",
       "      <th>products</th>\n",
       "      <th>order_time</th>\n",
       "      <th>company</th>\n",
       "      <th>order_amount</th>\n",
       "      <th>region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1076</td>\n",
       "      <td>88</td>\n",
       "      <td>X</td>\n",
       "      <td>2018-01-01 06:00:00.000000</td>\n",
       "      <td>Y</td>\n",
       "      <td>4692</td>\n",
       "      <td>Stavrapol</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1778</td>\n",
       "      <td>48</td>\n",
       "      <td>X</td>\n",
       "      <td>2018-01-01 15:00:00.000000</td>\n",
       "      <td>Y</td>\n",
       "      <td>2187</td>\n",
       "      <td>Ufa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2034</td>\n",
       "      <td>60</td>\n",
       "      <td>X</td>\n",
       "      <td>2018-01-01 18:00:00.000000</td>\n",
       "      <td>Y</td>\n",
       "      <td>2413</td>\n",
       "      <td>Saransk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2578</td>\n",
       "      <td>17</td>\n",
       "      <td>X</td>\n",
       "      <td>2018-01-01 20:00:00.000000</td>\n",
       "      <td>Y</td>\n",
       "      <td>3552</td>\n",
       "      <td>Ufa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3410</td>\n",
       "      <td>34</td>\n",
       "      <td>X</td>\n",
       "      <td>2018-01-01 05:00:00.000000</td>\n",
       "      <td>Y</td>\n",
       "      <td>1289</td>\n",
       "      <td>Stavrapol</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>7425</td>\n",
       "      <td>54</td>\n",
       "      <td>X</td>\n",
       "      <td>2018-01-01 09:00:00.000000</td>\n",
       "      <td>Y</td>\n",
       "      <td>801</td>\n",
       "      <td>Stavrapol</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8965</td>\n",
       "      <td>60</td>\n",
       "      <td>X</td>\n",
       "      <td>2018-01-01 23:00:00.000000</td>\n",
       "      <td>Y</td>\n",
       "      <td>1415</td>\n",
       "      <td>Moscow</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9695</td>\n",
       "      <td>28</td>\n",
       "      <td>X</td>\n",
       "      <td>2018-01-01 20:00:00.000000</td>\n",
       "      <td>Y</td>\n",
       "      <td>730</td>\n",
       "      <td>Saransk</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id  client_id products                  order_time company  \\\n",
       "0      1076         88        X  2018-01-01 06:00:00.000000       Y   \n",
       "1      1778         48        X  2018-01-01 15:00:00.000000       Y   \n",
       "2      2034         60        X  2018-01-01 18:00:00.000000       Y   \n",
       "3      2578         17        X  2018-01-01 20:00:00.000000       Y   \n",
       "4      3410         34        X  2018-01-01 05:00:00.000000       Y   \n",
       "5      7425         54        X  2018-01-01 09:00:00.000000       Y   \n",
       "6      8965         60        X  2018-01-01 23:00:00.000000       Y   \n",
       "7      9695         28        X  2018-01-01 20:00:00.000000       Y   \n",
       "\n",
       "   order_amount     region  \n",
       "0          4692  Stavrapol  \n",
       "1          2187        Ufa  \n",
       "2          2413    Saransk  \n",
       "3          3552        Ufa  \n",
       "4          1289  Stavrapol  \n",
       "5           801  Stavrapol  \n",
       "6          1415     Moscow  \n",
       "7           730    Saransk  "
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q = \"\"\"\n",
    "    Select *\n",
    "    From df_orders\n",
    "    where order_time between '2018-01-01' and '2018-01-02' and \n",
    "    products = 'X' and \n",
    "    company = 'Y'\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "sqldf(q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "d3144562",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [first_name, last_name]\n",
       "Index: []"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q = \"\"\"\n",
    "SELECT df_clients.first_name, df_clients.last_name\n",
    "FROM df_orders\n",
    "join df_clients\n",
    "on df_orders.client_id = df_clients.client_id\n",
    "where (strftime('%Y', 'now') - strftime('%Y', order_time)) * 12 +(strftime('%m', 'now') - strftime('%m', order_time)) <6\n",
    "and order_amount > (select avg(order_amount) from df_orders) \n",
    "and region in (select region from df_orders group by region order by order_amount limit 3)\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "sqldf(q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "a130c250",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/nb/lg50jgzs4_dc7mxlgvrrj9300000gn/T/ipykernel_14898/1689426829.py:1: DeprecationWarning: This function is deprecated. Please call randint(1, 10 + 1) instead\n",
      "  courier_id = np.random.random_integers(1, 10, 1000)\n",
      "/var/folders/nb/lg50jgzs4_dc7mxlgvrrj9300000gn/T/ipykernel_14898/1689426829.py:5: DeprecationWarning: This function is deprecated. Please call randint(1, 5 + 1) instead\n",
      "  courier_rating = np.random.random_integers(1, 5, 1000)\n"
     ]
    }
   ],
   "source": [
    "courier_id = np.random.random_integers(1, 10, 1000)\n",
    "courier_first_names = ['Иван', 'Андрей', 'Анатолий', 'Игорь']\n",
    "courier_last_names = ['Иванов', 'Алексеев', 'Тимофеев', 'Соколов']\n",
    "status_delivery = ['Delivered', 'Problem']\n",
    "courier_rating = np.random.random_integers(1, 5, 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "5b85dba9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_courier = pd.DataFrame({\n",
    "    'order_id' : all_orders_ids\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "95f483b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_courier = pd.DataFrame({\n",
    "    'order_id' : all_orders_ids,\n",
    "    'courier_id' : np.random.choice(courier_id, size=len(df_courier)),\n",
    "    'order_time' : np.random.choice(times,size=len(df_courier)),\n",
    "    'status_delivery' : np.random.choice(status_delivery, size=len(df_courier)),\n",
    "    'courier_rating' : np.random.choice(courier_rating, size=len(df_courier)),\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "f3def292",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>courier_id</th>\n",
       "      <th>order_time</th>\n",
       "      <th>status_delivery</th>\n",
       "      <th>courier_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2018-10-19 15:00:00</td>\n",
       "      <td>Problem</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2018-07-05 03:00:00</td>\n",
       "      <td>Problem</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2018-05-16 11:00:00</td>\n",
       "      <td>Delivered</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>2018-12-08 04:00:00</td>\n",
       "      <td>Delivered</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>2018-12-01 15:00:00</td>\n",
       "      <td>Delivered</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9994</th>\n",
       "      <td>9995</td>\n",
       "      <td>9</td>\n",
       "      <td>2018-10-05 12:00:00</td>\n",
       "      <td>Delivered</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>9996</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-14 17:00:00</td>\n",
       "      <td>Problem</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>9997</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-04-06 04:00:00</td>\n",
       "      <td>Delivered</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>9998</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-06-30 12:00:00</td>\n",
       "      <td>Problem</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>9999</td>\n",
       "      <td>4</td>\n",
       "      <td>2018-06-09 08:00:00</td>\n",
       "      <td>Delivered</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9999 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      order_id  courier_id          order_time status_delivery  courier_rating\n",
       "0            1          10 2018-10-19 15:00:00         Problem               4\n",
       "1            2           5 2018-07-05 03:00:00         Problem               5\n",
       "2            3           3 2018-05-16 11:00:00       Delivered               4\n",
       "3            4           7 2018-12-08 04:00:00       Delivered               1\n",
       "4            5           6 2018-12-01 15:00:00       Delivered               3\n",
       "...        ...         ...                 ...             ...             ...\n",
       "9994      9995           9 2018-10-05 12:00:00       Delivered               3\n",
       "9995      9996           2 2018-02-14 17:00:00         Problem               2\n",
       "9996      9997           1 2018-04-06 04:00:00       Delivered               5\n",
       "9997      9998           2 2018-06-30 12:00:00         Problem               3\n",
       "9998      9999           4 2018-06-09 08:00:00       Delivered               1\n",
       "\n",
       "[9999 rows x 5 columns]"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_courier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "7dc0d23f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [courier_id]\n",
       "Index: []"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q = \"\"\"\n",
    "SELECT courier_id\n",
    "FROM df_courier\n",
    "JOIN df_orders \n",
    "ON df_courier.order_id=df_orders.order_id\n",
    "where status_delivery = 'Problem'\n",
    "and df_courier.order_time < date('now')-df_orders.order_time\n",
    "and courier_rating < 3\n",
    "order by order_amount desc\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "sqldf(q)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
